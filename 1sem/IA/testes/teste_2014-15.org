#+TITLE: Teste 2014 15

*  Grupo 1
a) Caracterize e explique as decisões tomadas ao nível da representação do conhecimento;

  #+begin_src prolog
  aluno :: Id, Nome, Curso, Ano, Ects, Propina -> {V,F}

  id :: Id -> {V,F}
  nome :: Nome -> {V,F,Desconhecido}
  curso :: Curso -> {V,F,Desconhecido}
  ano :: Ano -> {V,F,Desconhecido}
  ects :: Ects -> {V,F,Desconhecido}
  propina :: Propina -> {V,F,Desconhecido}
  #+end_src

  Um aluno é caracterizado por ter :
   - um id
   - nome
   - frequentar um curso
   - andar num certo ano
   - ter ECTS
   - algo que identifique se ele já pagou a propina

b) Conhecimento

   + Definir o conhecimento falso
        #+begin_src prolog :noweb yes
-aluno(Id,N,C,A,E,P):-
    not(aluno(Id,N,C,A,E,P)),
    not(exception(aluno(Id,N,C,A,E,P))).
        #+end_src

   + Valores nulos do tipo interdito

        #+begin_src prolog :noweb yes
nulo(interdito).
        #+end_src

   + Excepcoes
         #+begin_src prolog :noweb yes
 exception(aluno(I,_,C,A,E,P)):- aluno(I,nulo,C,A,E,P).
 exception(aluno(I,_,C,A,E,P)):- aluno(I,nulo,C,A,E,P).
 exception(aluno(I,N,_,A,E,P)):- aluno(I,N,nulo,A,E,P).
 exception(aluno(I,N,_,A,E,P)):- aluno(I,N,incerto,A,E,P).
 exception(aluno(I,N,_,A,E,P)):- aluno(I,N,interdito,A,E,P).
 exception(aluno(I,N,C,_,E,P)):- aluno(I,N,C,incerto,E,P).
 exception(aluno(I,N,C,A,_,P)):- aluno(I,N,C,A,incerto,P).
 exception(aluno(I,N,C,A,_,P)):- aluno(I,N,C,A,nulo,P).
 exception(aluno(I,N,C,A,E,_)):- aluno(I,N,C,A,E,incerto).
 exception(aluno(3456,carlos,mdi,1,Ects,sim)):-
     Ects < 45, (-1) < Ects .
 exception(aluno(45678,duarte,miec,A,180,sim)):-
     A < 6, 2 < A.
 exception(aluno(67890,filipe,C,1,E,nao)):-
     ( C == lfis ; C == lefis ),
     ( E == 45 ; E == 54).
 exception(aluno(78901,N,lcc,3,180,sim)):-
     N == gisela ; N == gisele; N == gabriel.
     #+end_src

   + Conhecimento

        #+begin_src prolog :noweb yes
aluno(12345,ana,lei,1,60,sim).
aluno(23456,beatriz,lcc,2,60,nao).
aluno(56789,eva,miec,4,240,incerto).
aluno(89012,heitor,interdito,1,10,nao).
aluno(90123,ivo,incerto,2,180,sim).
        #+end_src

c) Invariantes
    #+begin_src prolog :noweb yes
+aluno(_,_,_,_,_,_):: (
     findall(Id, (aluno(Id,_,_,A,E,_), (A > 5 ; E > 300)), S ),
     length(S,0)).
    #+end_src
d) Inserir conhecimento
  #+begin_src prolog
%% Inserir conhecimento
inserir(New):- assert(New).
inserir(New):- retract(New), !, fail.

%% Adicionar um novo predicado obedecendo os invariantes
new_predicado(New):-
    findall(X,New::+X,S),
    inserir(New),
    valid(S).

%% Adicionar um novo aluno
add_aluno(Id,N,C,A,E,P):- new_predicado(aluno(Id,N,C,A,E,P)).
  #+end_src

* Grupo 2

1. Na linguagem de programação em lógica PROLOG, a expressão 'A=..B' representa a comparação dos valores decimais de A e B.

   Falso, representa o funtor de um dado termo, colocando numa lista o nome do termo e os seus respetivos arguemtos.

   Exemplo:
  #+begin_src prolog
amigos(arroz,batata(2)) =.. L.
  #+end_src

  :Result:
  #+begin_src prolog
L = [amigos, arroz, batata(2)]
  #+end_src

2. Na linguagem de programação prolog, o operador '=:=/2' representa a comparação dos valores aritméticos calculados de cada operando.

   Verdadeiro. Em oposicao ao operador '==\2', o '=:=\2' calcula primeiro os valores aritmeticos e só depois compara o resultado obtido de ambos os lados.

   Exemplo:
  #+begin_src prolog
3 == 2 + 1.

Falso

3 =:= 2 + 1.

Verdadeiro
  #+end_src

3. 'negação forte' e 'negação explicta' são duas designações para identificar a negação por falha de prova.

   ???

   Falso, a 'negacao explicita' acontece por falha na prova, ja a 'negação forte' acontece devido a falha de predicados

4. Em termos da representação de conhecimento imperfeito, os valores nulos tanto podem assumir a representação de conhecimento positivo como de conhecimento negativo.

   ???

5. Invariantes denotam regras de teste à consistência do conhecimento, com os quais se representa conhecimento positivo ou conhecimento negativo.

   Verdadeiro, invariantes servem para termos a garantia que certas regras são aplicadas quando queremos inserir novo conhecimento (conhecimento positivo) e quando queremos remover um dado conhecimento (conhecimento negativo). Nao permitindo a sua adicao, ou remoçao, no caso de algum dos invariantes falhar.

* Grupo 3
1. Questão

   V, V, F, F, V.
